{
    "contents" : "##############################################################\n## Method 3  : Bayesian estimation \n##############################################################\n## script to perform the Bayesian estimation of the complete exponential model\n## using rjags\n##############################################################################\n\n\nestimateBayes <- function(longline, MEM=1, n.iter=2000, burnin = 1000, pathfile=\"\", ne.missing=F, peConst=F, a.moy=NULL, b.moy=NULL)\n{\n  ##  check if the file script have been written \n  if(! ((\"scriptMEM1FullDataSet.txt\" %in% dir() ) &  (\"scriptMEM2FullDataSet.txt\" %in% dir() ) &\n          (\"scriptMEM2WithoutNeFullDataSet.txt\" %in% dir() )) ) \n  {\n    data(scriptMEM)\n    writeLines(text=MEM1script, con=file(description=\"MEM1FullDataSet.txt\"))\n    close(con=file(description=\"MEM1FullDataSet.txt\"))\n    writeLines(text=MEM1scriptpeConst, con=file(description=\"MEM1FullDataSetpeCOnst.txt\"))\n    close(con=file(description=\"MEM1FullDataSet.txt\"))\n    writeLines(text=MEM2script, con=file(description=\"MEM2FullDataSet.txt\"))\n    close(con=file(description=\"MEM2FullDataSet.txt\"))\n    writeLines(text=MEM2scriptpeConst, con=file(description=\"MEM2FullDataSetpeConst.txt\"))\n    close(con=file(description=\"MEM2FullDataSet.txt\"))\n    writeLines(text=MEM2WithoutNe, con=file(description=\"MEM2WithoutNeFullDataSet.txt\"))\n    close(con=file(description=\"MEM2WithoutNeFullDataSet.txt\"))\n    \n  } \n  if(MEM==1 & !ne.missing & !peConst)\n  {\n      filename <- \"MEM1FullDataSet.txt\"\n  }else if (MEM==2 & !ne.missing& !peConst)\n  {\n    filename <- \"MEM2FullDataSet.txt\"\n  }else if (MEM==2 & ne.missing )\n  {\n    filename <- \"MEM2WithoutNeFullDataSet.txt\"\n  }else if (MEM==1 & !ne.missing & peConst)\n  {\n    filename <- \"MEM1FullDataSetpeConst.txt\"\n  }else if (MEM==2 & !ne.missing & peConst)\n  {\n    filename <- \"MEM2FullDataSetpeConst.txt\"\n  }\n  if(pathfile!=\"\")\n     filename <- file.path(pathfile,filename)\n     \n  data.list <- formatDataForJags(longline, ne.missing=ne.missing, a.moy=a.moy, b.moy=a.moy)\n  print(data.list)\n  init.list <- formatInitForJags(longline, ne.missing=ne.missing, peConst=peConst)\n  print(init.list)\n    print(filename)\n  memModel <- jags.model(file=filename, data=data.list, inits=init.list, n.adapt=2000)\n  update(memModel, burnin)\n  output <- jags.samples(memModel,variable.names=c(\"lambda1\",\"lambda2\",\"pe\"), n.iter)\n  return(output)\n}\n\npostMean <- function(longline, outmcmc,  peConst=F)\n{\n  NYear <- longline$NYear\n  NArea <- longline$NArea\n  outl1 <- apply(outmcmc$lambda1,1, mean)\n  outl2 <- apply(outmcmc$lambda2,1, mean)\n  outpe <- apply(outmcmc$pe, 1, mean)\n  estimate <- data.frame(Year=rep(NA, NYear*NArea), Area=rep(NA, NYear*NArea),\n                         lambdaT=rep(NA, NYear*NArea), lambdaNT=rep(NA, NYear*NArea), \n                         pe=rep(NA, NYear*NArea))\n  \n  yearunique = as.numeric(levels(as.factor(longline$Year)))\n  areaunique = as.numeric(levels(as.factor(longline$Area)))\n  compt=1\n\n  \n#   for( a in 1:NArea){\n#     provlambdaT= data.frame(Year=NULL, Value=NULL)\n#     provlambdaNT= data.frame(Year=NULL, Value=NULL)\n#     for( y in 1:NYear)\n#     {\n#       if(sum(longline$Year==yearunique[y] & longline$Area==areaunique[a])>1)\n#       {\n#         n <- length(outmcmc$lambda1[1,,])\n#         p1 <- data.frame(Year=rep(yearunique[y],n), Value=outmcmc$lambda1[(a-1)*NYear+y,,])\n#         p2 <- data.frame(Year=rep(yearunique[y],n), Value=outmcmc$lambda2[(a-1)*NYear+y,,])\n#         provlambdaT = rbind(provlambdaT, p1)\n#         provlambdaNT = rbind(provlambdaNT, p2)\n#       }\n#     }\n    \n    \nfor(a in 1:NArea)   \n  {\n  for(y in 1:NYear)\n    {\n      ind <- which(longline$Year==yearunique[y] & longline$Area==areaunique[a] )\n      if(length(ind>0)){\n        estimate[compt,1] <- yearunique[y]\n        estimate[compt,2] <- areaunique[a] \n        estimate[compt,3] <- mean(outmcmc$lambda1[(a-1)*NYear + y ,,])\n        estimate[compt,4] <- mean(outmcmc$lambda2[(a-1)*NYear+y,,])\n        estimate[compt,5] <- ifelse( peConst,mean(outmcmc$pe) , mean(outmcmc$pe[(a-1)*NYear+y,,]))\n                                 #outl1[(a-1)*NYear+y], outl2[(a-1)*NYear+y], outpe[(a-1)*NYear+y])\n        compt=compt+1\n      }\n    }\n  }\n  if(compt<=nrow(estimate))\n  {\n    estimate <- estimate[-(compt:nrow(estimate)),]\n  }\n  return(estimate)\n\n}\n\npostSummary <- function(longline, outmcmc, peConst=F)\n{\n  NYear <- longline$NYear\n  NArea <- longline$NArea\n  Year  <- rep(NA, NYear*NArea)\n  Area  <- rep(NA, NYear*NArea)\n  outl1 <- apply(outmcmc$lambda1,1, summary)\n  outl2 <- apply(outmcmc$lambda2,1, summary)\n  outpe <- apply(outmcmc$pe, 1, summary)\n  nrows.tot <- NYear*NArea\n  estimate <- list(lambdaT=matrix(NA, nrow=NYear*NArea, ncol=8), lambdaNT=matrix(NA, nrow=NYear*NArea, ncol=8), \n                         pe=matrix(NA, nrow=NYear*NArea, ncol=8)\n                   )\n  \n  colnames(estimate$lambdaT)=c(unlist(strsplit(outl1[,1],\":\"))[seq(1,11,2)], \"sd\", \"cv\")\n  colnames(estimate$lambdaNT)=c(unlist(strsplit(outl2[,1 ],\":\"))[seq(1,11,2)], \"sd\", \"cv\")\n  colnames(estimate$pe)=c(unlist(strsplit(outl1[,1],\":\"))[seq(1,11,2)],\"sd\", \"cv\")\n  yearunique = as.numeric(levels(as.factor(longline$Year)))\n  areaunique = as.numeric(levels(as.factor(longline$Area)))\n  compt=1\n  for(a in 1:NArea)\n    {\n    for(y in 1:NYear)\n    {\n      outl1num=as.numeric(unlist(strsplit(outl1[,(a-1)*NYear+y],\":\"))[seq(2,12,2)])\n      outl2num=as.numeric(unlist(strsplit(outl2[,(a-1)*NYear+y],\":\"))[seq(2,12,2)])\n      if(! peConst)\n        outpenum=as.numeric(unlist(strsplit(outpe[,(a-1)*NYear+y],\":\"))[seq(2,12,2)])\n      else\n        outpenum=as.numeric(unlist(strsplit(outpe,\":\"))[seq(2,12,2)])\n      \n      if(sum(longline$Year==yearunique[y] & longline$Area==areaunique[a])>1)\n      {\n        Year[compt] <- yearunique[y]\n        Area[compt] <- areaunique[a] \n        estimate$lambdaT[compt,1:7] <- c(outl1num,sd(outmcmc$lambda1[(a-1)*NYear+y,,]))\n        estimate$lambdaNT[compt,1:7] <- c(outl2num, sd(outmcmc$lambda2[(a-1)*NYear+y,,]))\n        estimate$lambdaNT[compt,8] <- estimate$lambdaNT[compt,7] / estimate$lambdaNT[compt,4]\n        estimate$lambdaT[compt,8] <- estimate$lambdaT[compt,7] / estimate$lambdaT[compt,4]\n          if(!peConst){\n        estimate$pe[compt,1:7] <- c(outpenum, sd(outmcmc$pe[(a-1)*NYear+y,,]))\n          }else{\n            estimate$pe[compt,1:7] <- c(outpenum, sd(outmcmc$pe))\n          }\n        estimate$pe[compt,8] <- estimate$pe[compt,7] / estimate$pe[compt,4]\n              \n        compt=compt+1\n      }\n    }\n  }\n    \n    \n  if(compt<=nrows.tot)\n  {\n    Year <- Year[-(compt:nrows.tot )]\n    Area <- Area[-(compt:nrows.tot )]\n    estimate$lambdaT <- estimate$lambdaT[-(compt:nrows.tot ),]\n    estimate$lambdaNT <- estimate$lambdaNT[-(compt:nrows.tot ),]\n    estimate$pe <- estimate$pe[-(compt:nrows.tot ),]\n    \n  }\n  rownames(estimate$lambdaT)= (paste(Area, Year, sep=\"-\"))\n  rownames(estimate$lambdaNT)=rownames(estimate$lambdaT)\n  return(estimate)\n  \n}",
    "created" : 1406208265084.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1945668373",
    "id" : "2DAD63B6",
    "lastKnownWriteTime" : 1406219502,
    "path" : "/media/metienne_h/Recherche/CPUE/RockFish/Svn/longline/R/LonglineBayes.R",
    "project_path" : "R/LonglineBayes.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}