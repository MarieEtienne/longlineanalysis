{
    "contents" : "#### this file formats the data and prepraes all the necesseary files for MEM1 model\n\n### No NA allowed\n###  removes observation corresponding to less 2 observations for a year in a specifi area\nformatData <- function(data, sames=NULL , ne.missing=F)\n{\n  #############################################################################\n  ## Removing the observations with two few repetition in one area /one year\n  #############################################################################\n  dataTable <- table(data$Year, data$Area) ## which area for which year ?\n  #### dataDispo :3 columns data.frame, \n  ####   col 1 = Year, col2 = area, \n  ####   col3 = true if more than 2 observations are recorded for this year and this area, false otherwise\n  dataDispo <- data.frame(Year=rep(unique(data$Year), length(unique(data$Area))),\n                        Area=sort(rep(unique(data$Area), length(unique(data$Year)))),\n                        Data=as.numeric(dataTable)>1) \n  #### removing lines with less than 2 observations\n  dataDispo <- dataDispo[dataDispo$Data,]\n  #### ind corresponding records in the data \n  ind <-  which( paste(data$Year,data$Area, sep=\"_\")  %in% paste(dataDispo$Year, dataDispo$Area, sep=\"_\") )\n  #### dataUtile : same as data except that observations corresponding with (year,area) recorded only once have been removed\n  dataUtile <- data[ind,]\n  longlineData <-as.CLonglineData(year=dataUtile$Year, area=dataUtile$Area, nt=dataUtile$NT, \n                                  nnt=dataUtile$NNT, nb=dataUtile$Nb, ne=dataUtile$Ne, s=dataUtile$soaktime, sames=sames, , ne.missing=ne.missing)\n\n  \n  return(longlineData)\n}\n\n## function to write the data file used by jags\nformatDataForJags <- function(longline.list,  ne.missing=F,  a.moy=NULL, b.moy=NULL)\n{\n  \n  if(ne.missing)\n  {\n    Catch <- matrix(NA, nrow=longline.list$NData, ncol=3)\n    Catch[,1]= longline.list$NT\n    Catch[,2]= longline.list$NNT\n    Catch[,3]= longline.list$Nb\n  }else\n  {\n    Catch <- matrix(NA, nrow=longline.list$NData, ncol=4)\n    Catch[,1]= longline.list$Nb\n    Catch[,2]= longline.list$NT\n    Catch[,3]= longline.list$NNT\n    Catch[,4]= longline.list$Ne\n  }\n  indiceYear <- as.numeric(as.factor(longline.list$Year))\n  indiceArea <- as.numeric(as.factor(longline.list$Area))\n  if(ne.missing)\n  {\n    data.list=list(NArea=longline.list$NArea, NYear=longline.list$NYear, NData=longline.list$NData,N=longline.list$N,\n                   Catch=Catch, Year=longline.list$Year, Area=longline.list$Area,S=longline.list$S, indiceYear=indiceYear, indiceArea=indiceArea,\n                   a.moy=a.moy, b.moy=b.moy)\n  }else\n  {\n  data.list=list(NArea=longline.list$NArea, NYear=longline.list$NYear, NData=longline.list$NData,N=longline.list$N,\n                 Catch=Catch, Year=longline.list$Year, Area=longline.list$Area,S=longline.list$S, indiceYear=indiceYear, indiceArea=indiceArea)\n  }\n  return(data.list)\n}\n\n## function to write the data file used by jags\nformatInitForJags <- function(longline.list,  ne.missing=F, peConst=F)\n{\n \n  NYear= longline.list$NYear\n  NArea= longline.list$NArea\n  lambda1   <-  rep(5e-04, NYear*NArea)\n  lambda2   <-  rep(5e-04, NYear*NArea)\n  pe        <-   rep(5e-04, NYear*NArea)\n  yearunique = unique(longline.list$Year)\n  areaunique = unique(longline.list$Area)\n  \n  ok=0\n  compt=0\n  for( y in 1:NYear)\n    {\n    for( a in 1:NArea)\n      {\n      \n      subdata <- CLonglineData.extract(longline.list, year=yearunique[y] , area=areaunique[a])\n      if( !is.null(subdata))\n      {\n        \n        if(sum(subdata$NT)==0)\n        {\n          init <- rep(0,4)\n        } else\n        {\n          init <- MEM.MLE.YA(subdata=subdata, ne.missing=ne.missing) \n        }\n        lambda1[(a-1)*NYear + y] <- init[1] + 1e-5\n        lambda2[(a-1)*NYear + y] <- init[2] + 1e-5\n        pe[(a-1)*NYear + y] <- init[4]+1e-8\n        compt         <- compt+1\n          }\n      }\n    }\n  if(peConst)\n    pe <- mean(pe)\n  init.list <- list(lambda1=lambda1, lambda2=lambda2, pe=pe)\n  return(init.list)\n}",
    "created" : 1406208736277.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2517886249",
    "id" : "FA0F8FE3",
    "lastKnownWriteTime" : 1406217759,
    "path" : "/media/metienne_h/Recherche/CPUE/RockFish/Svn/longline/R/FormatData.R",
    "project_path" : "R/FormatData.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}