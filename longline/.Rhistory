source('~/EnCours/2015-YelloweyeSurvey/DFOYellowEye/PHMAAnalysiswithJags.R')
data.list  <-  FormatDataForJags(llData)
init.list  <-  FormatInitForJags(llData, MEM = MEM, peConst = peConst)
data.list
peConst=T
MEM=1
estimate <- MEM.MLE(llData = llData, MEM=MEM)
## using very small as initial values if no Target species observed
## avoid issues with log(0) and no importance as it is just used for initialisation
estimate$hat.lambda1[which(estimate$hat.lambda1<1e-13)] <- 1e-13
gg <- Reduce("rbind", strsplit(estimate$Group, "-"))
estimate$Fact1 <-gg[,1]
NFact1 <- llData$NFact1
NFact2 <- 0
if(dim(gg)[2]>1)
{
estimate$Fact2 <- gg[,2]
NFact2 <- llData$NFact2
}
if(NFact1==1 & NFact2<=1){
formRight <- "1"
}   else if (NFact1==1 & NFact2 > 1){
formRight <- "as.factor(Fact2)"
}   else if (NFact1>1 & NFact2 <= 1){
formRight <- "as.factor(Fact1)"
}   else if (NFact1>1 & NFact2 >1){
formRight <- "as.factor(Fact1)+as.factor(Fact2)"
}
cat(paste0("with formula  ", formRight, "\n"))
cat("\n *************************** \n")
coef.l1 <- coef(lm(formula=paste0("log(hat.lambda1)~", formRight), data=estimate))
coef.l2 <- coef(lm(formula=paste0("log(hat.lambda2)~", formRight), data=estimate))
log.mu1 <- coef.l1[1]
log.mu2 <- coef.l2[1]
log.lambda1F1 <- NA
log.lambda2F1 <- NA
if(NFact1>1){
log.lambda1F1 <- c(log.lambda1F1, coef.l1[2:NFact1])
log.lambda2F1 <- c(log.lambda2F1, coef.l2[2:NFact1])
}
log.lambda1F2 <- NULL
log.lambda2F2 <- NULL
if(NFact2>0){
log.lambda1F2 <- NA
log.lambda2F2 <- NA
if(NFact2>1){
log.lambda1F2 <- c(log.lambda1F2, coef.l1[(NFact1+1):(NFact1+NFact2-1)])
log.lambda2F2 <- c(log.lambda2F2, coef.l2[(NFact1+1):(NFact1+NFact2-1)])
}
}
pe <- estimate$hat.pNT
if(peConst)
pe <- mean(pe)
pe
peConst=F
pe <- estimate$hat.pNT
if(peConst)
pe <- mean(pe)
pe
adjustFact <- with(llData, exists("Fact2"))
if(sameS){
llData$sameS=T
}
if(adjustFact) {
llData$Fact1 <- as.factor(with(llData, paste0(Fact1, "-", Fact2 )))
llData$Fact2 <- NULL
llData$NFact2 <- NULL
}
res<- lapply(levels(llData$Fact1), function(d){
subdata <- Extract.longline(llData, fact1 = d)
tt <-MEM.MLE.YA(subdata=subdata, MEM=MEM)
return(tt)
})
library(longline)
estimate <- MEM.MLE(llData = llData, MEM=MEM)
c
library(longline)
estimate <- MEM.MLE(llData = llData, MEM=MEM)
res
library(longline)
estimate <- MEM.MLE(llData = llData, MEM=MEM)
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = F, filePath =   file.path(mainDir,resDir), nIter = 100, burnin = 10)
library(longline)
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = F, filePath =   file.path(mainDir,resDir), nIter = 100, burnin = 10)
library(longline)
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = F, filePath =   file.path(mainDir,resDir), nIter = 100, burnin = 10)
for(m in 1:2)
{
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = F, filePath =   file.path(mainDir,resDir), nIter = 100, burnin = 10)
}
source('~/EnCours/2015-YelloweyeSurvey/DFOYellowEye/PHMAAnalysiswithJags.R')
source('~/EnCours/2015-YelloweyeSurvey/DFOYellowEye/PHMAAnalysiswithJags.R')
library(longline)
test <- read.table('/home/metienne/EnCours/2015-YelloweyeSurvey/Result-OneAreaRes-PHMA_S/PHMA_S.csv', header = T, sep=",")
library(longline)
m=1
### read Data
#mainDir <- '/media/metienne_h/Consulting/DFO/2015-YelloweyeSurvey'
#mainDir <- '/home/metienne/bianca/Consulting/DFO/2015-YelloweyeSurvey/'
mainDir <- '/home/metienne/EnCours/2015-YelloweyeSurvey'
dataDir <- 'Data'
resDir <- 'Results/PHMA'
codeDir <- 'DFOYellowEye'
library('rjags')
library('longline')
library('stringr')
library('ggplot2')
library('scales')
source(file.path(mainDir, codeDir,"glmFunction.R"))
source(file.path(mainDir, codeDir, 'formattingFunction.R'))
nIter <- 5000
region <- 'South'
resDir <- paste0(resDir, region)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
depthBreaks = c(0, 101, 201,  801 )
###
PHMAData <- read.table(file.path(mainDir, dataDir, 'PHMALonglineSurveysForMarie.csv'),
sep=",", header=T)
ind <- which(str_detect(PHMAData$Survey, paste0('PHMA Rockfish Longline Survey - Outside ', region)))
PHMAData <- PHMAData[ind, ]
# ind <- which(PHMAData$Year<2012)
# PHMAData <- PHMAData[ind, ]
PHMAData <- PHMAData[,which(names(PHMAData)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
PHMAData <- test
PHMAData$Fact2 <- splitInClasses(data = PHMAData$Depth, depthBreaks)
PHMAData$Fact1 <- PHMAData$Year
table(PHMAData$Fact1)
summary(PHMAData)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
CPUE <- ComputeCPUE.longline(longline.PHMA)
summary(longline.PHMA)
###
m=1
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10)
df <- cbind(posIndices, pos=rep(1:nIter))[seq(1, nIter, length.out = 1000),]
ind <- which(df$Fact1==1)
p <- qplot(data =  df[ind,], x=pos, y=index) +geom_line()
p
by(posIndices, posIndices$Fact1, summary)
mainDir <- '/home/metienne/EnCours/2015-YelloweyeSurvey'
dataDir <- 'Data'
resDir <- 'Results/PHMA'
codeDir <- 'DFOYellowEye'
library('rjags')
library('longline')
library('stringr')
library('ggplot2')
library('scales')
source(file.path(mainDir, codeDir,"glmFunction.R"))
source(file.path(mainDir, codeDir, 'formattingFunction.R'))
nIter <- 5000
region <- 'South'
resDir <- paste0(resDir, region)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
depthBreaks = c(0, 101, 201,  801 )
###
PHMAData <- read.table(file.path(mainDir, dataDir, 'PHMALonglineSurveysForMarie.csv'),
sep=",", header=T)
ind <- which(str_detect(PHMAData$Survey, paste0('PHMA Rockfish Longline Survey - Outside ', region)))
PHMAData <- PHMAData[ind, ]
# ind <- which(PHMAData$Year<2012)
# PHMAData <- PHMAData[ind, ]
PHMAData <- PHMAData[,which(names(PHMAData)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
PHMAData$Fact2 <- splitInClasses(data = PHMAData$Depth, depthBreaks)
PHMAData$Fact1 <- PHMAData$Year
table(PHMAData$Fact1)
summary(PHMAData)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
CPUE <- ComputeCPUE.longline(longline.PHMA)
summary(longline.PHMA)
###
m=1
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10)
df <- cbind(posIndices, pos=rep(1:nIter))[seq(1, nIter, length.out = 1000),]
ind <- which(df$Fact1==1)
p <- qplot(data =  df[ind,], x=pos, y=index) +geom_line()
p
by(posIndices, posIndices$Fact1, summary)
by(posIndices, posIndices$Fact1, mean)
by(posIndices$index, posIndices$Fact1, mean)
unlist(by(posIndices$index, posIndices$Fact1, mean))
ok=unlist(by(posIndices$index, posIndices$Fact1, mean))
ok[3]/ok[1]
### read Data
#mainDir <- '/media/metienne_h/Consulting/DFO/2015-YelloweyeSurvey'
#mainDir <- '/home/metienne/bianca/Consulting/DFO/2015-YelloweyeSurvey/'
mainDir <- '/home/metienne/EnCours/2015-YelloweyeSurvey'
dataDir <- 'Data'
resDir <- 'Results/PHMA'
codeDir <- 'DFOYellowEye'
library('rjags')
library('longline')
library('stringr')
library('ggplot2')
library('scales')
source(file.path(mainDir, codeDir,"glmFunction.R"))
source(file.path(mainDir, codeDir, 'formattingFunction.R'))
nIter <- 5000
region <- 'South'
resDir <- paste0(resDir, region)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
depthBreaks = c(0, 101, 201,  801 )
###
PHMAData <- read.table(file.path(mainDir, dataDir, 'PHMALonglineSurveysForMarie.csv'),
sep=",", header=T)
ind <- which(str_detect(PHMAData$Survey, paste0('PHMA Rockfish Longline Survey - Outside ', region)))
PHMAData <- PHMAData[ind, ]
ind <- which(PHMAData$Year<2012)
PHMAData <- PHMAData[ind, ]
PHMAData <- PHMAData[,which(names(PHMAData)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
PHMAData$Fact2 <- splitInClasses(data = PHMAData$Depth, depthBreaks)
PHMAData$Fact1 <- PHMAData$Year
table(PHMAData$Fact1)
summary(PHMAData)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
CPUE <- ComputeCPUE.longline(longline.PHMA)
summary(longline.PHMA)
###
m=1
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10)
df <- cbind(posIndices, pos=rep(1:nIter))[seq(1, nIter, length.out = 1000),]
ind <- which(df$Fact1==1)
p <- qplot(data =  df[ind,], x=pos, y=index) +geom_line()
p
ok[3]/ok[1]
ok
### read Data
#mainDir <- '/media/metienne_h/Consulting/DFO/2015-YelloweyeSurvey'
#mainDir <- '/home/metienne/bianca/Consulting/DFO/2015-YelloweyeSurvey/'
mainDir <- '/home/metienne/EnCours/2015-YelloweyeSurvey'
dataDir <- 'Data'
resDir <- 'Results/PHMA'
codeDir <- 'DFOYellowEye'
library('rjags')
library('longline')
library('stringr')
library('ggplot2')
library('scales')
source(file.path(mainDir, codeDir,"glmFunction.R"))
source(file.path(mainDir, codeDir, 'formattingFunction.R'))
nIter <- 5000
region <- 'South'
resDir <- paste0(resDir, region)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
depthBreaks = c(0, 101, 201,  801 )
###
PHMAData <- read.table(file.path(mainDir, dataDir, 'PHMALonglineSurveysForMarie.csv'),
sep=",", header=T)
ind <- which(str_detect(PHMAData$Survey, paste0('PHMA Rockfish Longline Survey - Outside ', region)))
PHMAData <- PHMAData[ind, ]
ind <- which(PHMAData$Year<2012)
PHMAData <- PHMAData[ind, ]
summary(PHMAData)
PHMAData <- PHMAData[,which(names(PHMAData)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
PHMAData$Fact2 <- splitInClasses(data = PHMAData$Depth, depthBreaks)
PHMAData$Fact1 <- PHMAData$Year
table(PHMAData$Fact1)
summary(PHMAData)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s =
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
summary(longline.PHMA$Fact1)
CPUE <- ComputeCPUE.longline(longline.PHMA)
summary(longline.PHMA)
###
m=1
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10)
df <- cbind(posIndices, pos=rep(1:nIter))[seq(1, nIter, length.out = 1000),]
ok=unlist(by(posIndices$index, posIndices$Fact1, mean))
ok
ok[3]/ok[1]
test <- read.table('/home/metienne/EnCours/2015-YelloweyeSurvey/Result-OneAreaRes-PHMA_S/PHMA_S.csv', header = T, sep=",")
## Year 2007
PHMAData <- test
PHMAData <- PHMAData[,which(names(PHMAData)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
PHMAData$Fact2 <- splitInClasses(data = PHMAData$Depth, depthBreaks)
PHMAData$Fact1 <- PHMAData$Year
table(PHMAData$Fact1)
summary(PHMAData)
longline.PHMA <-  longline(fact1 = PHMAData$Fact1,
#         fact2 = PHMAData$Fact2,
nt = PHMAData$NT, nnt = PHMAData$NNT, nb = PHMAData$Nb, ne = PHMAData$Ne, s = PHMAData$soaktime)
CPUE <- ComputeCPUE.longline(longline.PHMA)
summary(longline.PHMA)
###
m=1
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10)
df <- cbind(posIndices, pos=rep(1:nIter))[seq(1, nIter, length.out = 1000),]
ind <- which(df$Fact1==1)
p <- qplot(data =  df[ind,], x=pos, y=index) +geom_line()
p
ok=unlist(by(posIndices$index, posIndices$Fact1, mean))
ok[3]/ok[1]
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10, parPrior=c(0.5,0.5))
ok=unlist(by(posIndices$index, posIndices$Fact1, mean))
ok[3]/ok[1]
exp(norm(1000, sd=0.001))
exp(rnorm(1000, sd=0.001))
hist(exp(rnorm(1000, sd=0.001)))
hist(exp(rnorm(1000, sd=1/0.001)))
log(mu1)<- rnorm(0, sd=1/0.001)
log.mu1<- rnorm(0, sd=1/0.001)
log.mu1<- rnorm(1000, sd=1/0.001)
log.lambda1F1<- rnorm(1000, sd=1/0.001)
hist(exp(log.mu1+log.lambda1F1))
tau.lambda=0.1
log.mu1  <- log(runif(100000, min = 0.00000001, max = 1))
hist(log.mu1)
log.lambda1F1<- rnorm(1000, sd=1/2)
log.lambda1F1<- rnorm(1000, sd=1/tau.lambda)
tau.lambda=2
log.lambda1F1<- rnorm(1000, sd=1/tau.lambda)
log.mu1<- rnorm(1000, sd=1/tau.lambda)
hist(exp(log.mu1+log.lambda1F1))
library(longline)
posIndices <- RunBayesEstimation(llData = longline.PHMA, MEM = m, peConst = T, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 10, parPrior=c(0.5,0.5))
ok=unlist(by(posIndices$index, posIndices$Fact1, mean))
ok[3]/ok[1]
load(file.path(mainDir, resDir, 'longline.PHMA-MEM=1-peConst=TRUE.Rd'))
PostIndicesPlot(longline.PHMA, out.samples, who = 'log.mu1', fileOut = file.path(mainDir, resDir, 'p1.pdf'))
PostIndicesPlot(longline.PHMA, out.samples, who = 'log.lambda1F1', fileOut = file.path(mainDir, resDir, 'p2.pdf'))
res <- PostIndicesPlot(longline.PHMA, out.samples, who = 'log.lambda1F1', fileOut = file.path(mainDir, resDir, 'p2.pdf'))
df <- res
names(df)
df$index <- exp(df$index)
p <- qplot(data =  df, x=pos, y=index) +geom_line()
p
p <- qplot(data =  df, aes(x=Fact1, y=index) + geom_boxplot()
p
p <- qplot(data =  df, aes(x=Fact1, y=index)) + geom_boxplot()
p
p <- ggplot(data =  df, aes(x=Fact1, y=index)) + geom_boxplot()
p
exp(rnorm(10000, -s^2/2, sd=s))
s=5
exp(rnorm(10000, -s^2/2, sd=s))
hist(exp(rnorm(10000, -s^2/2, sd=s)))
s=1
hist(exp(rnorm(10000, -s^2/2, sd=s)))
mean(exp(rnorm(10000, -s^2/2, sd=s)))
mean(exp(rnorm(10000, 0, sd=s)))
mean(exp(rnorm(10000, -s^2/2, sd=s)))
s=10
mean(exp(rnorm(10000, -s^2/2, sd=s)))
mean(exp(rnorm(100000, -s^2/2, sd=s)))
mean(exp(rnorm(100000, -s/2, sd=s)))
s=2
mean(exp(rnorm(100000, -s^2/2, sd=s)))
s=3
mean(exp(rnorm(100000, -s^2/2, sd=s)))
mean(exp(rnorm(10000, 0, sd=s)))
library(longline)
source('~/EnCours/2015-YelloweyeSurvey/DFOYellowEye/PHMAAnalysiswithJags.R')
load(file.path(mainDir, resDir, 'longline.PHMA-MEM=1-peConst=TRUE.Rd'))
df <- PostIndicesPlot(longline.PHMA, out.samples, who = 'log.lambda1F1', fileOut = file.path(mainDir, resDir, 'p2.pdf'))
ind <- which(df$Fact1==1)
df$index <- exp(df$index)
p <- ggplot(data =  df, aes(x=Fact1, y=index)) + geom_boxplot()
p
test
### read Data
#mainDir <- '/media/metienne_h/Consulting/DFO/2015-YelloweyeSurvey'
#mainDir <- '/home/metienne/bianca/Consulting/DFO/2015-YelloweyeSurvey/'
mainDir <- '/home/metienne/EnCours/2015-YelloweyeSurvey'
dataDir <- 'Data'
resDir <- 'Results/IPHC'
codeDir <- 'DFOYellowEye'
library('rjags')
library('longline')
library('stringr')
library('ggplot2')
library('scales')
library('parallel')
source(file.path(mainDir, codeDir,"glmFunction.R"))
source(file.path(mainDir, codeDir, 'formattingFunction.R'))
nIter <- 50
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
depthBreaks = c(0, 101, 201,  801 )
###
IPHCData1 <- read.table(file.path(mainDir, dataDir, 'IPHC_1996-2002_2013.csv'),
sep=",", header=T)
IPHCData1 <- IPHCData1[,which(names(IPHCData1)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
IPHCData2 <- read.table(file.path(mainDir, dataDir, 'IPHC2003_2014.csv'),
sep=",", header=T)
## remove PHMA Data
ind <- which(str_detect(IPHCData2$Survey, "PHMA"))
IPHCData2 <- IPHCData2[-ind,]
IPHCData2 <- IPHCData2[,which(names(IPHCData2)%in% c("Year", "Depth", "soaktime", "NT", "NNT",
"Nb", "Ne"))]
IPHCData <- rbind(IPHCData1, IPHCData2)
IPHCData$Fact2 <- splitInClasses(data = IPHCData$Depth, depthBreaks)
IPHCData$Fact1 <- IPHCData$Year
table(IPHCData$Fact1)
summary(IPHCData)
# Examining different case -- parallelized version ------------------------
differentCase<- expand.grid(depth=c(T,F), constPe=c(T,F))
mclapply(1:nrow(differentCase),mc.cores = 2,
function(i){
case <- differentCase[i,]
resDir <- file.path(resDir, 'YearEffect')
resDir <- ifelse(case$depth, paste0(resDir,'AccountedForDepth'), resDir)
resDir <- ifelse(case$constPe, paste0(resDir,'NonConstPe'), resDir)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
if(case$depth){
longline.IPHC <-  longline(fact1 = IPHCData$Fact1,
fact2 = IPHCData$Fact2,
nt = IPHCData$NT, nnt = IPHCData$NNT, nb = IPHCData$Nb,
ne = IPHCData$Ne, s = IPHCData$soaktime)
} else {
longline.IPHC <-  longline(fact1 = IPHCData$Fact1,
nt = IPHCData$NT, nnt = IPHCData$NNT,
nb = IPHCData$Nb, ne = IPHCData$Ne,
s = IPHCData$soaktime)
}
CPUE <- ComputeCPUE.longline(longline.IPHC)
summary(longline.IPHC)
posIndices <- lapply(1:2, function(m){
RunBayesEstimation(llData = longline.IPHC, MEM = m, peConst = case$constPe, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 100)
})
}
)
i=1
case <- differentCase[i,]
resDir <- file.path(resDir, 'YearEffect')
resDir <- ifelse(case$depth, paste0(resDir,'AccountedForDepth'), resDir)
resDir <- ifelse(case$constPe, paste0(resDir,'NonConstPe'), resDir)
if(!file.exists(file.path(mainDir, resDir)))
dir.create(file.path(mainDir, resDir))
if(case$depth){
longline.IPHC <-  longline(fact1 = IPHCData$Fact1,
fact2 = IPHCData$Fact2,
nt = IPHCData$NT, nnt = IPHCData$NNT, nb = IPHCData$Nb,
ne = IPHCData$Ne, s = IPHCData$soaktime)
} else {
longline.IPHC <-  longline(fact1 = IPHCData$Fact1,
nt = IPHCData$NT, nnt = IPHCData$NNT,
nb = IPHCData$Nb, ne = IPHCData$Ne,
s = IPHCData$soaktime)
}
CPUE <- ComputeCPUE.longline(longline.IPHC)
summary(longline.IPHC)
m=2
RunBayesEstimation(llData = longline.IPHC, MEM = m, peConst = case$constPe, filePath =   file.path(mainDir,resDir), nIter = nIter, burnin = 100)
source('~/EnCours/2015-YelloweyeSurvey/DFOYellowEye/IPHCAnalysiswithJags.R')
library('roxygen')
library('roxygen2')
roxygenise()
library(longline)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(longline)
?longline
library(longline)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
library(longline)
roxygenise()
N <- 20
n <- rep(200,N)
s <- rep(100, N)
dataSim <- rmultinom(n=n, size=N, prob=c(.3, .1, .2, .4) )
testLongline <- longline(fact1 = as.factor(sample(2004:2006, size=N,
replace=TRUE)), n=n, nt=dataSim[,2], nnt=dataSim[,3], ne=dataSim[,4], s=s)
dataSim <- rmultinom(n=n, size=N, prob=c(.3, .1, .2, .4) )
dataSim
testLongline <- longline(fact1 = as.factor(sample(2004:2006, size=N,
replace=TRUE)), n=n, nt=dataSim[2,], nnt=dataSim[3,], ne=dataSim[4,], s=s)
dataSim <- rmultinom(n=n, size=N, prob=c(.3, .1, .2, .4) )
testLongline <- longline(fact1 = as.factor(sample(2004:2006, size=N,
replace=TRUE)), n=n, nt=dataSim[2,], nnt=dataSim[3,], ne=dataSim[4,], s=s)
as.factor(sample(2004:2006, size=N,
replace=TRUE))
length(as.factor(sample(2004:2006, size=N,
replace=TRUE)))
n
length(n)
length(dataSim[2,])
dataSim <- rmultinom(n=N, size=n, prob=c(.3, .1, .2, .4) )
length(dataSim[2,])
dataSim[2,]
roxygenise()
roxygenise()
roxygenise()
library(longline)
roxygenise()
